<<<<<<< HEAD
name: "Terraform Pipeline Plan"
description: "Runs a Terraform Plan"
inputs:
  terraform_version:
    required: true
    type: string
  terraform_api:
    required: false
    type: string
  tf_cli_args:
    required: false
    type: string
  workspace:
    required: false
    type: string
  varfile:
    required: false
    type: string
  setup_terraform:
    type: boolean
    default: false
  terraform_init:
    type: boolean
    default: false
  download_cache:
    type: boolean
    default: false
  cache:
    required: false
    type: string
  commit_sha:
    required: false
    type: string

outputs:
  commit_sha:
    description: "Commit SHA"
    value: ${{ jobs.terraform.outputs.commit_sha }}
  planfile:
    description: "Name of Planfile Artifact"
    value: ${{ jobs.terraform.outputs.planfile }}
  pending_changes:
    description: "Are there pending changes?"
    value: ${{ jobs.terraform.outputs.pending_changes }}
  plan_succeeded:
    description: "Did the plan succeed?"
    value: ${{ jobs.terraform.outputs.plan_succeeded }}
  
runs:
  using: "composite"
  outputs:
      commit_sha: ${{ steps.checkout.outputs.commit }}
      planfile: ${{ env.planfile }}
      pending_changes: ${{ steps.plan.outputs.pending_changes }}
      plan_succeeded: ${{ steps.plan.outputs.plan_succeeded }}
=======
name: "Terraform Plan"
description: "Validates and Tests Terraform Configuration"
inputs:
  terraform_version:
    description: "Version of Terraform to use"
    required: true
  terraform_api:
    description: "API endpoint for Terraform"
    required: true
  github_username:
    description: "GitHub username"
    required: true
  github_email:
    description: "GitHub email address"
    required: true
  github_org:
    description: "GitHub organization"
    required: true
  github_server:
    description: "GitHub server URL"
    required: false
    default: github.com
  workspace:
    description: "Workspace name"
    required: false
  varfile:
    description: "Path to the variable file"
    required: false
  autoformat_message:
    description: "Commit message for autoformatting"
    default: "AutoFormat Commit"
    required: false
  AWS_ACCESS_KEY_ID:
    description: "AWS access key ID"
    required: false
  setup_terraform:
    description: "Flag to setup Terraform"
    default: "false"
  terraform_init:
    description: "Flag to initialize Terraform"
    default: "false"
  download_cache:
    description: "Flag to download cache"
    default: "false"
  cache:
    description: "Cache configuration"
    required: false
  commit_sha:
    description: "Commit SHA"
    required: false
  uuid:
    description: "UUID"
    required: true
  cache_bucket:
    required: true
    description: "S3 Bucket to upload to"
  plan_args:
    description: "Additional arguments to pass to terraform plan"
    required: false
outputs:
  commit_sha:
    description: "Commit SHA"
    value: ${{ steps.terraform.outputs.commit_sha }}
  planfile:
    description: "Name of Planfile Artifact"
    value: ${{ steps.terraform.outputs.planfile }}
  pending_changes:
    description: "Are there pending changes?"
    value: ${{ steps.terraform.outputs.pending_changes }}
  plan_succeeded:
    description: "Did the plan succeed?"
    value: ${{ steps.terraform.outputs.plan_succeeded }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      id: checkout
      with:
        ref: ${{ inputs.commit_sha == '' && github.head_ref || inputs.commit_sha }}
        persist-credentials: false

    - name: Download Terraform Directory (Workspace)
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' && inputs.workspace != '' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        key: ${{ github.repository }}/${{ inputs.workspace }}/${{ inputs.uuid }}/terraform-dir
        dest: .terraform
        unarchive: true

    - name: Download Terraform Directory (Non-Workspace)
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' && inputs.workspace == '' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        key: ${{ github.repository }}/${{ inputs.uuid }}/terraform-dir
        dest: .terraform
        unarchive: true

    - name: Download Terraform Lockfile (Workspace)
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' && inputs.workspace != '' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        key: ${{ github.repository }}/${{ inputs.workspace }}/${{ inputs.uuid }}/terraform.lock.hcl
        dest: .terraform.lock.hcl
        unarchive: false

    - name: Download Terraform Lockfile (Non-Workspace)
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' && inputs.workspace == '' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        key: ${{ github.repository }}/${{ inputs.uuid }}/terraform.lock.hcl
        dest: .terraform.lock.hcl
        unarchive: false

    - name: fix .terraform dir permissions
      shell: bash
      if: ${{ inputs.download_cache == 'true' }}
      run: chmod -R 777 .terraform

    - name: fix file permissions
      shell: bash
      if: ${{ inputs.download_cache == 'true' }}
      run: chmod -R 600 .terraform.lock.hcl

    - name: Setup Terraform
      uses: CSVD/gh-actions-setup-terraform@v2
      if: ${{ inputs.setup_terraform && env.TFE_TOKEN != '' }}
      with:
        terraform_version: ${{ inputs.terraform_version }}
        cli_config_credentials_token: ${{ env.TFE_TOKEN }}
        cli_config_credentials_hostname: ${{ inputs.terraform_api }}

    - name: Setup Terraform
      uses: CSVD/gh-actions-setup-terraform@v2
      if: ${{ inputs.setup_terraform && env.TFE_TOKEN == '' }}
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Set Workspace
      shell: bash
      if: ${{ inputs.workspace != '' }}
      run: |
        echo "TF_WORKSPACE=${{ inputs.workspace }}" >> $GITHUB_ENV

    - name: Set Varfile
      if: ${{ inputs.varfile != '' }}
      run: |
        echo "TF_CLI_ARGS='${{ env.TF_CLI_ARGS }} -var-file=${{ inputs.varfile }}" >> $GITHUB_ENV
    
    - name: Set TF_CLI_ARGS
      if: ${{ inputs.varfile != '' }}
      run: |
        echo "TF_CLI_ARGS='${{ env.TF_CLI_ARGS }} ${{ inputs.tf_cli_args }}" >> $GITHUB_ENV
        
    - name: Terraform Init
      id: init
      shell: bash
      if: ${{ inputs.terraform_init }}
      run: terraform init -upgrade
    
    - name: Set TF_CLI_ARGS
      shell: bash
      if: ${{ inputs.varfile != '' }}
      run: |
        echo "TF_CLI_ARGS=-var-file=${{ inputs.varfile }} ${{ inputs.plan_args }}" >> $GITHUB_ENV

    - name: Terraform Plan
      id: plan
      continue-on-error: true
      shell: bash
      run: |
        terraform plan -detailed-exitcode -out=terraform_plan
        exit_code=$?
        if [ $exit_code -eq 2 ]; then
          echo plan_succeeded=true >> $GITHUB_OUTPUT
          echo pending_changes=true >> $GITHUB_OUTPUT
        elif [ $exit_code -eq 0 ]; then
          echo plan_succeeded=true >> $GITHUB_OUTPUT
          echo pending_changes=false >> $GITHUB_OUTPUT
        else
          echo plan_succeeded=false >> $GITHUB_OUTPUT
          echo pending_changes=false >> $GITHUB_OUTPUT
        fi

    - uses: CSVD/s3-upload@main
      name: Archive Planfile
      if: github.ref == 'refs/heads/main'
      with:
        source: terraform_plan
        bucket: ${{ inputs.cache_bucket }}
        archive: true
        key: ${{ github.repository }}/${{ inputs.workspace }}/${{ inputs.uuid }}/terraform.plan

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Test \`${{ steps.test.outcome }}\`
          <details><summary>Plan Output</summary>
    
          \`\`\`\n
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
    
          </details>
    
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
